"use strict";(self.webpackChunk_antmjs_doc=self.webpackChunk_antmjs_doc||[]).push([[7083],{7083:function(s,n,a){a.r(n),n.default={tile:"@antmjs/api",docs:'<h1>@antmjs/api</h1>\n<div class="card"><h3 id="%40antmjs%2Fapi%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>@antmjs/api 是什么？</h3>\n<p><img src="https://raw.githubusercontent.com/zuolung/api-ui-demo/main/theme.png" alt="image"></p>\n<p><code>@antmjs/api</code> 是日常开发中接口的效率化工具。</p>\n<ul>\n<li>代码自动化转化为接口文档，代码和文档完全保持一致</li>\n<li>自动生成请求方法</li>\n<li>本地生成 mock 服务，提升联调效率</li>\n<li>根据后端 swagger 文档生成接口请求字段类型</li>\n</ul>\n</div><div class="card"><h3 id="%E5%AE%89%E8%A3%85"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>安装</h3>\n<pre><code class="language-bash">yarn add @antmjs/api\n</code></pre>\n</div><div class="card"><h3 id="%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>快速开始</h3>\n<p>接口定义的方案可以分为 <code>前端ts文件定义接口</code> 和 <code>后端swagger定义接口</code></p>\n<h5>前端 ts 文件定义接口</h5>\n<ul>\n<li><code>antm-api watch</code>: 监听请求字段类型文件，生成 描述接口文档 的数据，<code>server</code>本地文档服务,<code>mock</code>开启 mock 服务, <code>action</code>根据请求字段类型生成请求方法</li>\n<li><code>antm-api build</code>: 接口文档单独打包</li>\n<li><code>antm-api file</code>: 执行一次生成 描述接口文档 的数据, 应用场景：1.刚拉取业务项目初始化、2.仅想重新生成一次请求方法</li>\n</ul>\n<pre><code class="language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n    <span class="hljs-comment">// ...</span>\n    <span class="hljs-attr">&quot;api:watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;antm-api watch --path ./src/actions/types --server true --mock true --action true&quot;</span><span class="hljs-punctuation">,</span>\n    <span class="hljs-attr">&quot;api:build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;antm-api build --path ./src/actions/types&quot;</span><span class="hljs-punctuation">,</span>\n    <span class="hljs-attr">&quot;api:file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;antm-api file --path ./src/actions/types --action true&quot;</span><span class="hljs-punctuation">,</span>\n    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yarn build &amp; yarn api:build&quot;</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n<p>接口文档和项目一起打包到测试环境<code>yarn build</code>, 建议打包的目录结构如下，通过设置配置项<code>buildPath</code>为<code>./build/api</code></p>\n<pre><code class="language-markdown"><span class="hljs-bullet">-</span> build\n<span class="hljs-bullet">  -</span> index.html\n<span class="hljs-code">    ......\n  - api (antm-api 打包的结果，可以通过配置文件配置打包路径)\n</span></code></pre>\n<h5>后端 swagger 定义接口</h5>\n<ul>\n<li><code>antm-api swagger</code>: 生成请求字段类型文件， 再执行<code>antm-api watch</code></li>\n<li><code>antm-api watch</code>: 监听请求字段类型文件，生成 描述接口文档 的数据，<code>server</code>本地文档服务,<code>mock</code>开启 mock 服务, <code>action</code>根据请求字段类型生成请求方法</li>\n</ul>\n<p>是否再生成新的接口文档可以自己选择，如果只需要 mock 服务，将<code>--server true</code>移除即可</p>\n<pre><code class="language-json"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n    <span class="hljs-attr">&quot;swagger&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;antm-api swagger --path ./src/actions/swagger/types --url https://scapi.lsmart.wang/v2/api-docs&quot;</span><span class="hljs-punctuation">,</span>\n    <span class="hljs-attr">&quot;api:watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;antm-api watch --path ./src/actions/types --server true --mock true --action true&quot;</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span>\n</code></pre>\n</div><div class="card"><h3 id="%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>基本配置</h3>\n<p>配置文件根目录下 antm.config.js 文件下<code>api</code>属性</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>描述</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path</td>\n<td>请求字段类型所在的文件路径::::_QA</td>\n<td><em>string</em></td>\n<td>&quot;./src/actions/types&quot;</td>\n</tr>\n<tr>\n<td>buildPath</td>\n<td>接口文档打包路径</td>\n<td><em>string</em></td>\n<td>&quot;./api-ui&quot;</td>\n</tr>\n<tr>\n<td>buildPort</td>\n<td>接口文档开发环境服务端口</td>\n<td><em>number</em></td>\n<td>7878</td>\n</tr>\n</tbody>\n</table>\n</div><div class="card"><h3 id="mock%20%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>mock 服务配置</h3>\n<p>antm.config.js 文件下<code>api</code>的<code>mock</code>属性, 前端定义接口通过<code>定义请求字段</code>的注释来 mock 数据或者拦截 mock 服务的方式，\n基于后端 swagger 只能通过拦截 mock 服务的方式，mock 服务会返回根据 swagger 的枚举数据和 formatDate 等数据类型生成的默认的 mock 数据</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>描述</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>port</td>\n<td>mock 服务端口</td>\n<td><em>number</em></td>\n<td>10099</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>所有接口延时返回的时间</td>\n<td><em>number</em></td>\n<td>0</td>\n</tr>\n<tr>\n<td>baseIntercept</td>\n<td>拦截基本类型数据</td>\n<td><em>function</em></td>\n<td>--</td>\n</tr>\n<tr>\n<td>arrayRule</td>\n<td>拦截数组类型数据</td>\n<td><em>function</em></td>\n<td>--</td>\n</tr>\n</tbody>\n</table>\n<p>拦截基本类型数据<code>mock.baseIntercept</code>配置案例，<a href="http://mockjs.com/examples.html#String">建议按照 mockjs 字符、数字、布尔值 规则 返回</a>.</p>\n<p><strong>可以根据字段名称和名称去定义返回的数据</strong></p>\n<pre><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">baseIntercept</span>(<span class="hljs-params">params</span>) {\n  <span class="hljs-comment">// type：string、number、boolean</span>\n  <span class="hljs-comment">// fieldName：字段名称</span>\n  <span class="hljs-comment">// originValue：原有值，swagger枚举类型、formatDate等或手动写的@value注释</span>\n  <span class="hljs-comment">// url：请求路径</span>\n  <span class="hljs-keyword">const</span> { type, fieldName, originValue, url } = params\n  <span class="hljs-keyword">if</span> (originValue) <span class="hljs-keyword">return</span> originValue\n\n  <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;string&#x27;</span>) {\n    <span class="hljs-keyword">if</span> (fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;name&#x27;</span>) || fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;Name&#x27;</span>))\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;@cname&#x27;</span>\n    <span class="hljs-keyword">if</span> (fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;code&#x27;</span>) || fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;Code&#x27;</span>))\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;@word(4, 6)&#x27;</span>\n    <span class="hljs-keyword">if</span> (\n      fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;intro&#x27;</span>) ||\n      fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;Intro&#x27;</span>) ||\n      fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;Long&#x27;</span>)\n    ) {\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;@cparagraph(1, 3)&#x27;</span>\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;@ctitle&#x27;</span>\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;number&#x27;</span>) {\n    <span class="hljs-keyword">if</span> (fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;Id&#x27;</span>) || fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;id&#x27;</span>)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;@integer(99, 100000)&#x27;</span>\n    }\n\n    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;boolean&#x27;</span>) {\n    <span class="hljs-keyword">if</span> (fieldName === <span class="hljs-string">&#x27;success&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>\n  }\n}\n</code></pre>\n<p>拦截数组类型数据<code>mock.arrayRule</code>配置案例， <a href="http://mockjs.com/examples.html#Array">建议按照 mockjs 数组 规则 返回</a></p>\n<pre><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayRule</span>(<span class="hljs-params">params</span>) {\n  <span class="hljs-keyword">const</span> { type, fieldName, url } = params\n  <span class="hljs-comment">// 随机19-20条数组</span>\n  <span class="hljs-keyword">if</span> (fieldName === <span class="hljs-string">&#x27;list&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;19-20&#x27;</span>\n}\n</code></pre>\n</div><div class="card"><h3 id="action%20%E9%85%8D%E7%BD%AE"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>action 配置</h3>\n<p>antm.config.js 文件下<code>api</code>的<code>action</code>属性</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>描述</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>requestImport</td>\n<td>请求方法的代码字符串</td>\n<td><em>string</em></td>\n<td>&quot;import { createFetch } from &quot;@/utils/request&quot;</td>\n</tr>\n<tr>\n<td>dirPath</td>\n<td>相对类型文件的路径</td>\n<td><em>string</em></td>\n<td>&quot;../&quot;</td>\n</tr>\n<tr>\n<td>requestFnName</td>\n<td>请求方法名称</td>\n<td><em>string</em></td>\n<td>&quot;createFetch&quot;</td>\n</tr>\n<tr>\n<td>createDefaultModel</td>\n<td>定义请求方法的结构</td>\n<td><em>function</em></td>\n<td><code>createDefaultModel</code></td>\n</tr>\n</tbody>\n</table>\n<p>默认的<code>createDefaultModel</code>如下</p>\n<pre><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createDefaultModel</span>(<span class="hljs-params">{\n  requestImport = <span class="hljs-string">&quot;import { createFetch } from &#x27;@/utils/request&#x27;&quot;</span>,\n  requestFnName = <span class="hljs-string">&#x27;createFetch&#x27;</span>,\n  fileName = <span class="hljs-string">&#x27;a&#x27;</span>,\n  data = {},\n}</span>) {\n  <span class="hljs-keyword">const</span> packages = []\n  <span class="hljs-keyword">let</span> requestActionsStr = <span class="hljs-string">&#x27;&#x27;</span>\n  <span class="hljs-comment">// 根据data拼接多个业务请求方法</span>\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> data) {\n    <span class="hljs-comment">// 需要判断item.description &amp;&amp; item.url</span>\n    <span class="hljs-keyword">if</span> (key !== <span class="hljs-string">&#x27;Record&lt;string,any&gt;&#x27;</span> &amp;&amp; item.<span class="hljs-property">description</span> &amp;&amp; item.<span class="hljs-property">url</span>) {\n      <span class="hljs-keyword">const</span> item = data[key]\n      packages.<span class="hljs-title function_">push</span>(key)\n      requestActionsStr += <span class="hljs-string">::::_QA\n      // <span class="hljs-subst">::::_ABitem.description}</span>\n      export const <span class="hljs-subst">::::_ABkey}</span><span class="hljs-subst">::::_ABfileName?.replace(/^S/, <span class="hljs-keyword">function</span> (s) {\n        <span class="hljs-keyword">return</span> s.toUpperCase()\n      })}</span> = <span class="hljs-subst">::::_ABrequestFnName}</span>&lt;<span class="hljs-subst">::::_ABkey}</span>[&#x27;request&#x27;], <span class="hljs-subst">::::_ABkey}</span>[&#x27;response&#x27;]&gt;(&#x27;<span class="hljs-subst">::::_AB\n        item.url\n      }</span>&#x27;, &#x27;<span class="hljs-subst">::::_ABitem.method}</span>&#x27;);\n      ::::_QA</span>\n    }\n  }\n\n  <span class="hljs-keyword">const</span> packagesStr = packages.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>)\n\n  <span class="hljs-keyword">return</span> <span class="hljs-string">::::_QA\n    // @ts-nocheck\n    <span class="hljs-subst">::::_ABrequestImport}</span>\n    import type { <span class="hljs-subst">::::_ABpackagesStr}</span> } from &#x27;./types/<span class="hljs-subst">::::_ABfileName}</span>&#x27;;\n\n    <span class="hljs-subst">::::_ABrequestActionsStr}</span>\n    ::::_QA</span>\n}\n</code></pre>\n</div><div class="card"><h3 id="swagger%20%E9%85%8D%E7%BD%AE"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>swagger 配置</h3>\n<p>antm.config.js 文件下<code>api</code>的<code>swagger</code>属性, swagger 转换后，对应 formatDate 和枚举类型的数据会转换成 mock 数据。\n生成请求字段文件的名称为<code>swagger.tags.name</code>,如果有中文则转拼音</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>描述</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>swagger 数据地址</td>\n<td><em>string</em></td>\n<td>--</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>使用的的接口模块，对应<code>swagger.tags.name</code>, 不传则使用所有</td>\n<td><em>string[]</em></td>\n<td>--</td>\n</tr>\n</tbody>\n</table>\n<h5>如何定义请求字段</h5>\n<ul>\n<li><code>普通注释</code>: 接口描述或字段描述</li>\n<li><code>@url</code>: 请求路径</li>\n<li><code>@timeout</code>: 接口延时返回 单位毫秒</li>\n<li><code>@introduce</code>: 接口额外的详细介绍</li>\n<li><code>@value</code>: 基础类型字段的固定 mock 数据, 可以使用 mockjs 规则,规则前缀<code>@</code>改为<code>#</code>,例如#title、#date(\'YYYY-MM-DD\')</li>\n<li><code>@rule</code>: mock 复杂数据的规则，例如：19-20，生成数组数组 19 条或者 20 条</li>\n<li>更多 mock 配置，请查看<a href="http://mockjs.com/">mockjs</a></li>\n<li>mockjs 官网域名到期可以前往<a href="https://www.jianshu.com/p/d812ce349265">第三方博客-mockjs 使用介绍</a></li>\n</ul>\n<p>支持外部定义公共类型，例如请求结构，分页数据接口都是可以提取出来，像分页数据可以公共设置为 数据<code>rule</code>19-20， total 总数为 39，随机数据取测试页面里的分页功能</p>\n<pre><code class="language-typescript"><span class="hljs-comment">/**\n * 获取用户列表信息\n * <span class="hljs-doctag">@url</span> /z/common/user/list\n * <span class="hljs-doctag">@introduce</span> 这是请求所有用户数据的接口\n * <span class="hljs-doctag">@timeout</span> 1000\n * <span class="hljs-doctag">@method</span> <span class="hljs-variable">GET</span>\n */</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> userInfo = {\n  <span class="hljs-attr">request</span>: {\n    <span class="hljs-comment">/**\n     * 每页数据数量\n     **/</span>\n    <span class="hljs-attr">pageSize</span>: <span class="hljs-built_in">number</span>\n    <span class="hljs-comment">/**\n     * 第几页\n     **/</span>\n    <span class="hljs-attr">pageNum</span>: <span class="hljs-built_in">number</span>\n  }\n  <span class="hljs-attr">response</span>: {\n    <span class="hljs-comment">/**\n     * 成功\n     **/</span>\n    <span class="hljs-attr">success</span>: <span class="hljs-built_in">boolean</span>\n    <span class="hljs-attr">data</span>: {\n      <span class="hljs-comment">/**\n       * 用户总数\n       * <span class="hljs-doctag">@value</span> 39\n       **/</span>\n      <span class="hljs-attr">total</span>: <span class="hljs-built_in">number</span>\n      <span class="hljs-comment">/**\n       * 用户列表\n       * <span class="hljs-doctag">@rule</span> 19-20\n       **/</span>\n      <span class="hljs-attr">list</span>: {\n        <span class="hljs-comment">/**\n         * 用户拥有的角色， 《注意字符需要双引号》\n         * <span class="hljs-doctag">@value</span> [&quot;运营&quot;, &quot;HR&quot;, &quot;销售&quot;]\n         **/</span>\n        <span class="hljs-attr">roles</span>: <span class="hljs-built_in">string</span>[]\n        <span class="hljs-comment">/**\n         * 用户名称\n         * <span class="hljs-doctag">@value</span> #title\n         **/</span>\n        <span class="hljs-attr">userName</span>: <span class="hljs-built_in">string</span>\n        <span class="hljs-comment">/**\n         * 枚举值字符 《注意字符需要双引号》\n         * <span class="hljs-doctag">@value</span> [&quot;状态1&quot;, &quot;状态2&quot;]\n         **/</span>\n        <span class="hljs-attr">someone</span>: <span class="hljs-built_in">string</span>\n        <span class="hljs-comment">/**\n         * 枚举值数字\n         * <span class="hljs-doctag">@value</span> [1, 2]\n         **/</span>\n        <span class="hljs-attr">someNum</span>: <span class="hljs-built_in">number</span>\n      }[]\n    }\n  }\n}\n</code></pre>\n</div><div class="card"><h3 id="%E5%B0%86%E6%96%87%E6%A1%A3%20UI%20%E5%BA%94%E7%94%A8%E5%88%B0%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>将文档 UI 应用到测试环境</h3>\n<p>开发环境只需要开启 <code>antm-api watch --path ./src/actions/types --mock true --action true</code>\n正式打包则使用 <code>antm-api file</code>, 再执行本地项目的构建</p>\n<pre><code class="language-jsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">ApiUi</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@antmjs/api&#x27;</span>\n<span class="hljs-comment">// 默认当前项目生成接口文档数据，.gitignore文件加上 .cache</span>\n<span class="hljs-keyword">import</span> apiData <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/../.cache/api-ui-data.json&#x27;</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@antmjs/api/ui/app.less&#x27;</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Index</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactNode</span> {\n  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ApiUi</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;crm接口文档&quot;</span> <span class="hljs-attr">mockPort</span>=<span class="hljs-string">{10998}</span> <span class="hljs-attr">apiData</span>=<span class="hljs-string">{apiData}</span> /&gt;</span></span>\n}\n</code></pre>\n</div>',h3Ids:"@antmjs/api 是什么？:::安装:::快速开始:::基本配置:::mock 服务配置:::action 配置:::swagger 配置:::将文档 UI 应用到测试环境"}}}]);